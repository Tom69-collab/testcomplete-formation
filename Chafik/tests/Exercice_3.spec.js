const { test, expect } = require("@playwright/test");
const {
  navigateToITAkademy,
  waitForPageStability,
  clickElementWithFallback,
  openLinkInNewTab,
  closePage,
  setupTestConfig,
} = require("./utils/test-helpers");

test("Exercice 3 - E-Learning + LinkedIn avec Delay", async ({
  page,
  context,
}) => {
  // Configuration du test
  setupTestConfig(test, 75000); // Plus de temps √† cause du delay de 10s

  console.log("üöÄ D√©but du test Exercice 3 - E-Learning + LinkedIn avec Delay");

  // 1. Navigation robuste vers IT Akademy
  await navigateToITAkademy(page);
  await waitForPageStability(page);

  // 2. Cliquer sur le bouton "E-LEARNING" avec s√©lecteurs multiples
  const eLearningSelectors = [
    "text=E-LEARNING",
    "text=e-learning",
    "text=E-Learning",
    '[href*="e-learning"]',
    'a:has-text("E-LEARNING")',
    '[data-testid*="elearning"]',
  ];

  const eLearningClicked = await clickElementWithFallback(
    page,
    eLearningSelectors,
    "E-Learning",
    7000 // Timeout un peu plus long
  );

  if (!eLearningClicked) {
    throw new Error(
      "Aucun bouton E-Learning trouv√© avec les s√©lecteurs disponibles"
    );
  }

  // 3. V√©rifier que la page E-learning est ouverte avec patterns flexibles
  console.log("üîç V√©rification de la page E-Learning...");

  const eLearningUrlPatterns = [
    /.*e-learning.*/i,
    /.*elearning.*/i,
    /.*formation.*/i,
    /.*cours.*/i,
    /.*learning.*/i,
  ];

  let urlMatched = false;
  for (const pattern of eLearningUrlPatterns) {
    try {
      await expect(page).toHaveURL(pattern, { timeout: 10000 });
      urlMatched = true;
      console.log(`‚úÖ URL E-Learning confirm√©e: ${page.url()}`);
      break;
    } catch (error) {
      console.log(`‚ùå Pattern ${pattern} ne correspond pas √† l'URL actuelle`);
    }
  }

  if (!urlMatched) {
    console.log(`‚ÑπÔ∏è URL actuelle: ${page.url()}`);
    console.log("‚ö†Ô∏è Continuation du test malgr√© l'URL non correspondante");
  }

  // 4. Delay manuel de 10 secondes avec feedback utilisateur
  console.log("‚è≥ D√©but du d√©lai manuel de 10 secondes...");

  // D√©lai progressif avec feedback toutes les 2 secondes
  for (let i = 1; i <= 5; i++) {
    await page.waitForTimeout(2000);
    console.log(`‚è±Ô∏è  D√©lai en cours... ${i * 2}/10 secondes`);
  }

  console.log("‚úÖ D√©lai de 10 secondes termin√©");

  // 5. Ouvrir le lien LinkedIn dans un nouvel onglet avec s√©lecteurs robustes
  console.log("üîó Recherche et ouverture du lien LinkedIn...");

  const linkedInSelectors = [
    'a[href*="linkedin.com"]',
    'a[href*="linkedin"]',
    '[data-testid*="linkedin"]',
    'img[alt*="linkedin" i]',
    'i[class*="linkedin"]',
    ".linkedin",
    "text=LinkedIn",
    '[title*="LinkedIn" i]',
    'svg[aria-label*="LinkedIn" i]',
  ];

  const linkedInPage = await openLinkInNewTab(
    page,
    context,
    linkedInSelectors,
    "LinkedIn",
    /linkedin\.com/
  );

  // 6. V√©rifications approfondies de la page LinkedIn
  if (linkedInPage) {
    console.log("üîç V√©rification approfondie de la page LinkedIn...");

    // V√©rifier diff√©rents √©l√©ments LinkedIn
    const linkedInElements = [
      "text=LinkedIn",
      '[data-test-id*="linkedin"]',
      'img[alt*="LinkedIn"]',
      '[role="banner"]',
      'nav[aria-label*="Primary"]',
      ".feed-container",
    ];

    let elementFound = false;
    for (const element of linkedInElements) {
      try {
        await expect(linkedInPage.locator(element).first()).toBeVisible({
          timeout: 8000,
        });
        console.log(`‚úÖ √âl√©ment LinkedIn confirm√©: ${element}`);
        elementFound = true;
        break;
      } catch (error) {
        console.log(`‚ùå √âl√©ment LinkedIn ${element} non trouv√©`);
      }
    }

    if (!elementFound) {
      console.log(
        "‚ö†Ô∏è Aucun √©l√©ment LinkedIn typique trouv√©, mais la page s'est ouverte"
      );
    }

    // V√©rifier le titre de la page LinkedIn
    try {
      const linkedInTitle = await linkedInPage.title();
      console.log(`üìÑ Titre de la page LinkedIn: "${linkedInTitle}"`);

      if (linkedInTitle.toLowerCase().includes("linkedin")) {
        console.log("‚úÖ Titre LinkedIn confirm√©");
      }
    } catch (error) {
      console.log("‚ö†Ô∏è Impossible de r√©cup√©rer le titre LinkedIn");
    }
  } else {
    console.log("‚ö†Ô∏è Aucun lien LinkedIn trouv√© sur la page E-Learning");
  }

  // 7. Nettoyage - Fermer toutes les pages ouvertes
  console.log("üßπ Nettoyage des pages ouvertes...");

  await closePage(linkedInPage, "LinkedIn");

  // Note: La page principale se ferme automatiquement √† la fin du test
  console.log("üéâ Test Exercice 3 termin√© avec succ√®s !");
});
