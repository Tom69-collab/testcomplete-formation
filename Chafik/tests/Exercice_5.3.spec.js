const { test, expect } = require("@playwright/test");
const {
  waitForPageStability,
  clickElementWithFallback,
  setupTestConfig,
} = require("./utils/test-helpers");

test("Exercice 5.3 - Champs dynamiques avec donn√©es r√©elles", async ({
  page,
}) => {
  // Configuration du test
  setupTestConfig(test, 50000);

  console.log("üöÄ D√©but du test Exercice 5.3 - Champs dynamiques DemoQA");

  // Donn√©es r√©elles pour les champs dynamiques
  const testData = {
    dateOfBirth: {
      day: "15",
      month: "July", // Juillet
      monthValue: "6", // Index 6 pour juillet
      year: "1995",
    },
    subjects: ["Computer Science", "Physics", "Chemistry"],
    hobbies: ["Sports", "Reading"], // Sports, Reading, Music
  };

  console.log(
    `üìÖ Date de naissance: ${testData.dateOfBirth.day} ${testData.dateOfBirth.month} ${testData.dateOfBirth.year}`
  );
  console.log(`üìö Mati√®res: ${testData.subjects.join(", ")}`);
  console.log(`üéØ Hobbies: ${testData.hobbies.join(", ")}`);

  // 1. Navigation directe vers le formulaire
  console.log("üì° Chargement du formulaire Practice Form...");

  try {
    await page.goto("https://demoqa.com/automation-practice-form", {
      waitUntil: "domcontentloaded",
      timeout: 30000,
    });
    console.log("‚úÖ Formulaire charg√© avec succ√®s");
  } catch (error) {
    console.log(`‚ö†Ô∏è Erreur lors du chargement: ${error.message}`);
    console.log("üîÑ Tentative de rechargement...");
    await page.goto("https://demoqa.com/automation-practice-form", {
      waitUntil: "load",
      timeout: 20000,
    });
  }

  // 2. Attendre la stabilisation de la page
  await waitForPageStability(page);

  // 3. Configurer la date de naissance
  console.log("üìÖ Configuration de la date de naissance...");

  // Cliquer sur le champ date avec s√©lecteurs robustes
  const dateInputSelectors = [
    "#dateOfBirthInput",
    'input[placeholder*="Date"]',
    ".react-datepicker__input-container input",
    'input[id*="date"]',
  ];

  const dateInputClicked = await clickElementWithFallback(
    page,
    dateInputSelectors,
    "Date de naissance"
  );

  if (!dateInputClicked) {
    throw new Error("Impossible d'ouvrir le s√©lecteur de date");
  }

  // Attendre que le datepicker s'ouvre
  await page.waitForTimeout(1000);

  // S√©lectionner le mois
  console.log(`üìÖ S√©lection du mois: ${testData.dateOfBirth.month}...`);
  try {
    const monthSelector = ".react-datepicker__month-select";
    await page.waitForSelector(monthSelector, { timeout: 5000 });
    await page.selectOption(monthSelector, testData.dateOfBirth.monthValue);
    console.log(`‚úÖ Mois s√©lectionn√©: ${testData.dateOfBirth.month}`);
  } catch (error) {
    console.log(`‚ùå Erreur s√©lection mois: ${error.message}`);
  }

  // S√©lectionner l'ann√©e
  console.log(`üìÖ S√©lection de l'ann√©e: ${testData.dateOfBirth.year}...`);
  try {
    const yearSelector = ".react-datepicker__year-select";
    await page.waitForSelector(yearSelector, { timeout: 5000 });
    await page.selectOption(yearSelector, testData.dateOfBirth.year);
    console.log(`‚úÖ Ann√©e s√©lectionn√©e: ${testData.dateOfBirth.year}`);
  } catch (error) {
    console.log(`‚ùå Erreur s√©lection ann√©e: ${error.message}`);
  }

  // S√©lectionner le jour
  console.log(`üìÖ S√©lection du jour: ${testData.dateOfBirth.day}...`);
  try {
    const daySelector = `.react-datepicker__day--0${testData.dateOfBirth.day}`;
    await page.waitForSelector(daySelector, { timeout: 5000 });
    await page.click(daySelector);
    console.log(`‚úÖ Jour s√©lectionn√©: ${testData.dateOfBirth.day}`);
  } catch (error) {
    console.log(`‚ùå Erreur s√©lection jour: ${error.message}`);
    // Fallback: essayer avec d'autres formats
    try {
      const alternativeSelectors = [
        `.react-datepicker__day:has-text("${testData.dateOfBirth.day}")`,
        `[aria-label*="${testData.dateOfBirth.day}"]`,
      ];

      for (const selector of alternativeSelectors) {
        try {
          await page.click(selector);
          console.log(`‚úÖ Jour s√©lectionn√© avec fallback: ${selector}`);
          break;
        } catch (fallbackError) {
          console.log(`‚ùå Fallback ${selector} √©chou√©`);
        }
      }
    } catch (finalError) {
      console.log(`‚ö†Ô∏è Impossible de s√©lectionner le jour`);
    }
  }

  // 4. Ajouter les mati√®res
  console.log("üìö Ajout des mati√®res...");

  for (const subject of testData.subjects) {
    try {
      console.log(`üìñ Ajout de la mati√®re: ${subject}...`);

      const subjectSelectors = [
        "#subjectsInput",
        'input[placeholder*="Type to search"]',
        ".subjects-auto-complete__input input",
        'input[id*="subject"]',
      ];

      let subjectInputFound = false;
      for (const selector of subjectSelectors) {
        try {
          await page.waitForSelector(selector, { timeout: 3000 });
          await page.fill(selector, subject);
          await page.keyboard.press("Enter");
          console.log(`‚úÖ Mati√®re "${subject}" ajout√©e avec: ${selector}`);
          subjectInputFound = true;
          break;
        } catch (error) {
          console.log(`‚ùå S√©lecteur ${selector} non trouv√© pour mati√®re`);
        }
      }

      if (!subjectInputFound) {
        console.log(`‚ö†Ô∏è Impossible d'ajouter la mati√®re: ${subject}`);
      }

      // Pause entre les mati√®res
      await page.waitForTimeout(500);
    } catch (error) {
      console.log(`‚ùå Erreur ajout mati√®re ${subject}: ${error.message}`);
    }
  }

  // 5. S√©lectionner les hobbies
  console.log("üéØ S√©lection des hobbies...");

  for (const hobby of testData.hobbies) {
    try {
      console.log(`üéØ S√©lection du hobby: ${hobby}...`);

      let hobbySelectors = [];

      if (hobby === "Sports") {
        hobbySelectors = [
          'label[for="hobbies-checkbox-1"]',
          "#hobbies-checkbox-1 + label",
          'input[id="hobbies-checkbox-1"] + label',
          'label:has-text("Sports")',
          '.custom-checkbox:has-text("Sports") label',
        ];
      } else if (hobby === "Reading") {
        hobbySelectors = [
          'label[for="hobbies-checkbox-2"]',
          "#hobbies-checkbox-2 + label",
          'input[id="hobbies-checkbox-2"] + label',
          'label:has-text("Reading")',
          '.custom-checkbox:has-text("Reading") label',
        ];
      } else if (hobby === "Music") {
        hobbySelectors = [
          'label[for="hobbies-checkbox-3"]',
          "#hobbies-checkbox-3 + label",
          'input[id="hobbies-checkbox-3"] + label',
          'label:has-text("Music")',
          '.custom-checkbox:has-text("Music") label',
        ];
      }

      const hobbyClicked = await clickElementWithFallback(
        page,
        hobbySelectors,
        `Hobby ${hobby}`,
        3000
      );

      if (hobbyClicked) {
        console.log(`‚úÖ Hobby "${hobby}" s√©lectionn√©`);
      } else {
        console.log(`‚ö†Ô∏è Impossible de s√©lectionner le hobby: ${hobby}`);
      }

      // Pause entre les hobbies
      await page.waitForTimeout(500);
    } catch (error) {
      console.log(`‚ùå Erreur s√©lection hobby ${hobby}: ${error.message}`);
    }
  }

  // 6. V√©rifications des donn√©es saisies
  console.log("üîç V√©rification des donn√©es dynamiques...");

  try {
    // V√©rifier que la date est bien s√©lectionn√©e
    const dateValue = await page.inputValue("#dateOfBirthInput");
    if (dateValue && dateValue.includes(testData.dateOfBirth.year)) {
      console.log(`‚úÖ Date de naissance confirm√©e: ${dateValue}`);
    } else {
      console.log(`‚ö†Ô∏è Date de naissance non confirm√©e`);
    }

    // V√©rifier les mati√®res ajout√©es
    const subjectsContainer = page.locator(
      ".subjects-auto-complete__multi-value"
    );
    const subjectsCount = await subjectsContainer.count();
    console.log(`üìö Nombre de mati√®res ajout√©es: ${subjectsCount}`);

    // V√©rifier les hobbies s√©lectionn√©s
    for (let i = 1; i <= 3; i++) {
      const hobbyChecked = await page.isChecked(`#hobbies-checkbox-${i}`);
      if (hobbyChecked) {
        console.log(`‚úÖ Hobby ${i} s√©lectionn√©`);
      }
    }
  } catch (error) {
    console.log(`‚ö†Ô∏è Erreur lors des v√©rifications: ${error.message}`);
  }

  // 7. R√©sum√© du test
  console.log("üìä R√©sum√© des champs dynamiques:");
  console.log(
    `   ‚Ä¢ Date de naissance: ${testData.dateOfBirth.day}/${testData.dateOfBirth.month}/${testData.dateOfBirth.year}`
  );
  console.log(`   ‚Ä¢ Mati√®res: ${testData.subjects.length} mati√®res ajout√©es`);
  console.log(`   ‚Ä¢ Hobbies: ${testData.hobbies.length} hobbies s√©lectionn√©s`);

  // Pause finale p√©dagogique seulement si la page est ouverte
  if (!page.isClosed()) {
    await page.waitForTimeout(2000);
  } else {
    console.log("‚ö†Ô∏è Page ferm√©e, pas de pause finale");
  }

  console.log("üéâ Test Exercice 5.3 termin√© avec succ√®s !");
  console.log("‚ÑπÔ∏è Champs dynamiques configur√©s avec des donn√©es r√©elles");
});
